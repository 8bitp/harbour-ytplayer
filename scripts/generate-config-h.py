#!/usr/bin/env python

import re
import json
import sys, getopt

from pprint import pprint

def show_help():
    print(sys.argv[0] + ' -k <youtube data key file> -c <youtube client id file> -o <outputfile>')

def warn(msg):
    sys.stderr.write("WARNING: " + msg + "\n")

def get_api_key_define(keyfile):
    f = open(keyfile, 'r')
    line = f.readline()
    line = line.rstrip("\n")
    f.close()
    out = "/*\n * Value obtained from: " +  keyfile + "\n */\n"
    out += "#define YOUTUBE_DATA_API_V3_KEY \"" + line + "\"\n"
    return out

def get_client_id_defines(idfile):
    f = open(idfile, 'r')
    data = json.load(f)
    f.close()

    if "installed" not in data:
        warn("\"installed\" key not found in " + idfile);
        return None

    dict = data["installed"]

    outstr = "/*\n * Values obtained from: %s" % idfile + "\n */\n"

    if "auth_uri" not in dict:
        warn("\"auth_uri\" key not found in " + idfile)
        return None
    outstr += "#define YOUTUBE_AUTH_URI \"" + dict["auth_uri"] + "\"\n"

    if "client_id" not in dict:
        warn("\"client_id\" key not found in " + idfile)
        return None
    outstr += "#define YOUTUBE_AUTH_CLIENT_ID \"" + dict["client_id"] + "\"\n"

    if "client_secret" not in dict:
        warn("\"client_secret\" key not found in " + idfile)
        return None
    outstr += "#define YOUTUBE_AUTH_CLIENT_SECRET \"" + dict["client_secret"] + "\"\n"

    if "token_uri" not in dict:
        warn("\"token_uri\" key not found in " + idfile)
        return None
    outstr += "#define YOUTUBE_AUTH_TOKEN_URI \"" + dict["token_uri"] + "\"\n"

    if "redirect_uris" not in dict:
        warn("\n\"redirect_uris\" key not found in " + idfile)
        return None

    supported_redirect_uri = "urn:ietf:wg:oauth:2.0:oob"
    support_urn_oob = False
    for uri in dict["redirect_uris"]:
        if uri == supported_redirect_uri:
            support_urn_oob = True
            break

    if not support_urn_oob:
        warn('"' + supported_redirect_uri + '" redirect type not supported by given client id!')
        return None

    outstr += '#define YOUTUBE_AUTH_REDIRECT_URI \"' + supported_redirect_uri + "\"\n"

    return outstr

def main(argv):
    outputfile = None
    keyfile = None
    idfile = None

    try:
        opts, args = getopt.getopt(argv,"hk:d:o:",["keyfile=", "idfile=" ,"outfile="])
    except getopt.GetoptError:
        show_help()
        sys.exit(2)
    for opt, arg in opts:
        if opt == '-h':
            show_help()
            sys.exit()
        elif opt in ("-o", "--outfile"):
            outputfile = arg
        elif opt in ("-k", "--keyfile"):
            keyfile = arg
        elif opt in ("-d", "--idfile"):
            idfile = arg
        else:
            show_help()
            sys.exit(3)

    out = None
    if outputfile:
        out = open(outputfile, "w")
        print("Generating config file: " + outputfile + "\n");
    else:
        sys.stderr.write("Generating config file\n");
        out = sys.stdout

    out.write("/*\n * Autogenerated by: %s" % (sys.argv[0]) + "\n */\n\n")
    out.write("#ifndef _CONFIG_H_\n")
    out.write("#define _CONFIG_H_\n\n")

    if keyfile:
        out.write(get_api_key_define(keyfile))
        out.write("\n")

    if idfile:
        defs = get_client_id_defines(idfile)
        out.write(get_client_id_defines(idfile))
        out.write("\n")

    out.write("#endif\n");

    if out != sys.stdout:
        out.close()

if __name__ == "__main__":
    main(sys.argv[1:])
